#pragma once
/*
* Scene에 띄우고자하는 객체의 속성값을 부여하고, 객체수에 따른 렌더링 (상속)
* 
*/
#include "Shader.h"
#include "Camera.h"
class CScene 
{
public:
	CScene() {};
	~CScene() {};
	//씬에서 마우스와 키보드 메시지를 처리한다. 
	bool OnProcessingMouseMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM 
	lParam);
	bool OnProcessingKeyboardMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM
		lParam);

	void BuildObjects(ID3D12Device* pd3dDevice, ID3D12GraphicsCommandList* pd3dCommandList);
	void ReleaseObjects();
	bool ProcessInput(UCHAR* pKeysBuffer);
	void AnimateObjects(float fTimeElapsed);
	void Render(ID3D12GraphicsCommandList* pd3dCommandList,CCamera *pCamera);
	
	void ReleaseUploadBuffers();

	//그래픽 루트 시그너쳐를 생성한다. 
	ID3D12RootSignature *CreateGraphicsRootSignature(ID3D12Device *pd3dDevice);
	ID3D12RootSignature* GetGraphicsRootSignature();

	CCamera* pCamera = NULL;
	CHeightMapTerrain* GetTerrain() {return(m_pTerrain);}

	CGameObject** m_ppGameObjects = NULL;
	int							m_nGameObjects = 0;
	float						m_fElapsedTime = 0.0f;

	CPlayer* m_pPlayer = NULL;
	CGameObject* m_pCGObjcet= NULL;
protected:
	//배치(Batch) 처리를 하기 위하여 씬을 셰이더들의 리스트로 표현한다. 
	CObjectsShader *m_pShaders = NULL;
	int m_nShaders = 0;
	ID3D12RootSignature* m_pd3dGraphicsRootSignature = NULL;
	CHeightMapTerrain* m_pTerrain = NULL;

};

